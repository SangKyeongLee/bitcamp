// 비트 연산자 : >>, >>>, <<
package step04;

public class Exam04_3{
    public static void main(String[] args){
        int i = 0b01101001;
        
        System.out.println(i);
        System.out.println(i >>> 1); // 00110100|1 => 52
        System.out.println(i >>> 2); // 00011010|0 => 26
        System.out.println(i >>> 3); // 00001101|0 => 13
        System.out.println(i >>> 4); // 00000110|1 => 6
        System.out.println("------------");
        // >>> 연산자를 사용하여 오른쪽으로 이동 후,
        // 왼쪽 쪽 빈자리는 무조건 0으로 채운다.
        // 그래서 양수일 때는 >> 연산자와 같은 결과가 나오지만
        // 다음과 같이 음수 일때는 양수로 바뀌는 결과가 나온다.

        // 음수를 이동
        i = 0b11111111_11111111_11111111_10101001; //-87
        System.out.println(i);
        System.out.println(i >>> 1); 
        // 0_11111111_11111111_11111111_1010100|1
        // => 2로 나눈 후에 소수점이 있으면
        // 그 수보다 더 작은 정수값이 되는 결과가 나온다.

        System.out.println(i >>> 2); 
        // 00_11111111_11111111_11111111_101010|01
        
        System.out.println(i >>> 3); 
        // 000_11111111_11111111_11111111_10101|001
        System.out.println(i >>> 4); 
        // 0000_11111111_11111111_11111111_1010|1001
    }
}
// 오른쪽 이동
// - 1비트 이동은 나누기 2 한 것과 같은 효과를 준다.
